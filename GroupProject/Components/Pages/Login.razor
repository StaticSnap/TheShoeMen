@page "/login"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using BCrypt.Net;
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<div class="text-center mb-16">
        <h2 class="text-4xl font-bold text-gray-800 mb-2">Login with your TheShoeMen credentials:</h2>
    </div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @((MarkupString)errorMessage)
    </div>
}

<form @onsubmit="HandleSubmit" class="mx-auto" style="max-width: 50%; text-align: left; padding-top: 20px;">
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" id="username" @bind="username" class="form-control" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" id="password" @bind="password" class="form-control" required>
    </div>
    <button type="submit" class="shop-button" disabled="@isLoading">
        @if (isLoading)
        {
            <span>Loading...</span>
        }
        else
        {
            <span>Log in</span>
        }
    </button>
</form>

@code {
    private string username = "";
    private string password = "";
    private string errorMessage = "";
    private bool isLoading = false;

    private async Task HandleSubmit()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            // Query to fetch the user by username
            var query = $"SELECT password FROM users WHERE username = '{username}'";

            using var response = await Http.PostAsync("http://localhost:8080", new StringContent(query));
            var result = await response.Content.ReadFromJsonAsync<List<Dictionary<string, string>>>();

            if (result != null && result.Count > 0)
            {
                // Extract the hashed password from the result
                var hashedPassword = result[0]["password"];

                // Verify the provided password against the hashed password
                if (BCrypt.Verify(password, hashedPassword))
                {
                    // Login successful
                    NavigationManager.NavigateTo("/Shop");
                }
                else
                {
                    errorMessage = "Invalid username or password. Don't have an account? <a href='/createaccount'>Create one here</a>";
                }
            }
            else
            {
                errorMessage = "Invalid username or password. Don't have an account? <a href='/createaccount'>Create one here</a>";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while trying to log in. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
