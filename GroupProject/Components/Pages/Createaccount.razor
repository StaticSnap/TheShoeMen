@page "/createaccount"
@rendermode InteractiveServer
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<div class="text-center mb-16">
        <h2 class="text-4xl font-bold text-gray-800 mb-2">Create your TheShoeMen account:</h2>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @((MarkupString)errorMessage)
    </div>
}

<form @onsubmit="HandleSubmit" class="mx-auto" style="max-width: 50%; text-align: left; padding-top: 20px;">
    <div class="mb-3">
        <label class="form-label">I am a</label>
        <div class="form-check">
            <input type="radio" id="customerRole" name="UserRole" class="form-check-input" value="customer" @onchange="SetSelectedRole">
            <label for="customerRole" class="form-check-label">Customer</label>
        </div>
        <div class="form-check">
            <input type="radio" id="ownerRole" name="UserRole" class="form-check-input" value="employee" @onchange="SetSelectedRole">
            <label for="ownerRole" class="form-check-label">Admin (register an employee)</label>
        </div>
    </div>
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" id="username" @bind="username" class="form-control" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" id="password" @bind="password" class="form-control" required>
    </div>
    <button type="submit" class="shop-button" disabled="@isLoading">
        @if (isLoading)
        {
            <span>Loading...</span>
        }
        else
        {
            <span>Create Account</span>
        }
    </button>
</form>

@code {
    private string username = "";
    private string password = "";
    private string errorMessage = "";
    private bool isLoading = false;
    private string SelectedRole { get; set; } = "customer";

    private void SetSelectedRole(ChangeEventArgs e)
    {
        SelectedRole = e.Value?.ToString();
    }

    private async Task HandleSubmit()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            // Check if username exists
            var checkQuery = new
            {
                type = "select",
                parameters = new
                {
                    table = "users",
                    username = username
                }
            };

            using var checkResponse = await Http.PostAsJsonAsync("http://localhost:8080/api/query", checkQuery);
            var result = await checkResponse.Content.ReadFromJsonAsync<List<object>>();

            if (result == null || result.Count == 0)
            {
                // Create new account
                var createQuery = new
                {
                    type = "insert",
                    parameters = new
                    {
                        table = "users",
                        username = username,
                        password = password,
                        role = SelectedRole
                    }
                };

                using var createResponse = await Http.PostAsJsonAsync("http://localhost:8080/api/query", createQuery);
                NavigationManager.NavigateTo("/Shop");
            }
            else
            {
                errorMessage = "Username already in use please <a href='/login'>log in</a> with your credentials";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while trying to create your account. Please try again.";
            Console.WriteLine($"Create account error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
