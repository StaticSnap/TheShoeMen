@page "/createaccount"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using GroupProject.Components.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ICookieService CookieService
@inject UserState UserState

<PageTitle>Create Account</PageTitle>

<h2>Create a TheShoeMen username and password:</h2>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @((MarkupString)errorMessage)
    </div>
}

<form @onsubmit="HandleSubmit" class="mx-auto" style="max-width: 50%; text-align: left;">
    <div class="mb-3">
        <label class="form-label">I am a</label>
        <div class="form-check">
            <input type="radio" id="customerRole" name="UserRole" class="form-check-input" value="customer" @onchange="SetSelectedRole" checked>
            <label for="customerRole" class="form-check-label">Customer</label>
        </div>
        <div class="form-check">
            <input type="radio" id="ownerRole" name="UserRole" class="form-check-input" value="employee" @onchange="SetSelectedRole">
            <label for="ownerRole" class="form-check-label">Admin (register an employee)</label>
        </div>
    </div>
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" id="username" @bind="username" class="form-control" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" id="password" @bind="password" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span>Loading...</span>
        }
        else
        {
            <span>Create Account</span>
        }
    </button>
</form>

@code {
    private string username = "";
    private string password = "";
    private string errorMessage = "";
    private bool isLoading = false;
    private string SelectedRole { get; set; } = "customer"; // Default selection
    private bool isFirstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if user is already logged in
            var savedUsername = await CookieService.GetCookieAsync("username");
            if (!string.IsNullOrEmpty(savedUsername))
            {
                NavigationManager.NavigateTo("/Shop");
            }
            isFirstRender = false;
            StateHasChanged();
        }
    }

    private void SetSelectedRole(ChangeEventArgs e)
    {
        SelectedRole = e.Value?.ToString();
    }

    private async Task HandleSubmit()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            // Create SQL query to check login
            var query = $"SELECT username FROM users WHERE username = '{username}'";

            using var response = await Http.PostAsync("http://localhost:8080", new StringContent(query));
            var result = await response.Content.ReadFromJsonAsync<List<List<string>>>();

            if (result == null || result.Count == 0)
            {
                // profile doesn't exist, can create this account.
                var queryCreate = $"insert into users (username, password, user_role) values('{username}', '{password}', '{SelectedRole}')";
                using var responseCreate = await Http.PostAsync("http://localhost:8080", new StringContent(queryCreate));
                
                // Set cookies for the new user
                await CookieService.SetCookieAsync("username", username, 30);
                await CookieService.SetCookieAsync("user_role", SelectedRole, 30);
                
                UserState.SetUser(username, SelectedRole);
                NavigationManager.NavigateTo("/Shop");
            }
            else
            {
                errorMessage = "Username already in use please <a href='/login'>log in</a> with your credentials";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while trying to create account. Please try again.";
            Console.WriteLine($"Account creation error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
