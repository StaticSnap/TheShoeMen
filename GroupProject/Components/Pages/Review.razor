@page "/review/{shoeid}"
@using System.Net.Http.Json
@inject NavigationManager navigation
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>Review</PageTitle>

<div class="text-center mb-16">
    <h2 class="text-4xl font-bold text-gray-800 mb-2">Review @shoe.model</h2>
</div>

<div class="mx-auto text-center">
    <EditForm Model="@this" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mx-auto text-center">
            <label for="username">Username:</label>
            <InputText id="username" @bind-Value="username" />
        </div>

        <div class="mx-auto text-center">
            <label for="rating">Rating:</label>
            <InputNumber id="rating" @bind-Value="rating" Min="1" Max="5" />
        </div>

        <button class="view-details-button" type="submit">Submit Review</button>
    </EditForm>
</div>

@code {
    [Parameter] public string shoeid { get; set; }
    private Shoe shoe;
    private string username;
    private int rating;

    protected override Task OnInitializedAsync()
    {
        shoe = Shoes.GetShoeFromID(int.Parse(shoeid));
        return base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        var query = $@"INSERT INTO reviews (username, ShoeID, rating) 
                     VALUES('{username}', '{shoeid}', '{rating}')
                     ON CONFLICT(username, ShoeID) DO UPDATE SET rating = excluded.rating";

        try 
        {
            var content = new StringContent(query, System.Text.Encoding.UTF8, "text/plain");
            using var response = await Http.PostAsync("http://localhost:8080", content);
            
            if (response.IsSuccessStatusCode)
            {
                // Check if response content exists before reading
                if (response.Content != null)
                {
                    try 
                    {
                        var responseContent = await response.Content.ReadAsStringAsync();
                        if (!string.IsNullOrEmpty(responseContent))
                        {
                            Console.WriteLine($"Server response: {responseContent}");
                        }
                        navigation.NavigateTo("/shop");
                    }
                    catch (Exception readEx)
                    {
                        Console.WriteLine($"Error reading response: {readEx.Message}");
                    }
                }
                else
                {
                    Console.WriteLine("Response content was null");
                    navigation.NavigateTo("/shop");
                }
            }
            else
            {
                Console.WriteLine($"Error submitting review: {response.StatusCode}");
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Server response: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception submitting review: {ex.Message}");
            Console.WriteLine($"Query was: {query}");
        }
        navigation.NavigateTo("/shop");
    }
}
